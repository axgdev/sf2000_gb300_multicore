--- a/src/core_api.c
+++ b/src/core_api.c
@@ -3,10 +3,12 @@
 #include <string.h>
 #include <stdio.h>
 #include <stdarg.h>
+#include <stdbool.h>
 #include <reent.h>
 
 #include "libretro.h"
 #include "file/file_path.h"
 #include "file/config_file.h"
 
 #include "core_api.h"
@@ -14,6 +16,14 @@
 #include "stockfw.h"
 #include "hal_api.h"
 #include "video_sf2000.h"
+
+// --- Extern function declarations ---
+// These functions are defined in other files but used here.
+extern void build_game_config_filepath(char *filepath, size_t size, const char *game_filepath, const char* library_name);
+extern void build_core_config_filepath(char *filepath, size_t size);
+extern void video_options(config_file_t *conf);
+extern void video_cleanup(void);
+
 
 #define MAXPATH 	255
 #define SYSTEM_DIRECTORY	"/mnt/sda1/bios"
@@ -36,13 +46,18 @@
 static void wrap_video_refresh_cb(const void *data, unsigned width, unsigned height, size_t pitch);
 static void xrgb8888_video_refresh_cb(const void *data, unsigned width, unsigned height, size_t pitch);
 static bool g_xrgb888 = false;
 static int16_t wrap_input_state_cb(unsigned port, unsigned device, unsigned index, unsigned id);
 
 static bool g_show_fps = false;
 static void frameskip_cb(BOOL flag);
 static bool g_per_state_srm = true;
 
 static void dummy_retro_run(void);
 
-static int *fw_fps_counter_enable = 0x80c0b5e0;
-static int *fw_fps_counter = 0x80c0b5dc;
-static char *fw_fps_counter_format = 0x8099bdf0;	// "%2d/%2d"
+// Note: These addresses are for SF2000 and are different on GB300.
+// The HAL does not abstract these yet, so this feature will only work on SF2000.
+// A proper fix would be to add them to the HAL.
+static int *fw_fps_counter_enable = (int*)0x80c0b5e0;
+static int *fw_fps_counter = (int*)0x80c0b5dc;
+static char *fw_fps_counter_format = (char*)0x8099bdf0;	// "%2d/%2d"
 static void fps_counter_enable(bool enable);
 
 
@@ -82,6 +97,11 @@
    size_t (*retro_get_memory_size)(unsigned);
 };
 
+static int state_stub(const char *path) {
+	(void)path;
+	return 1;
+}
+
 void build_rom_filepath(
 	char *filepath, size_t size,
 	const char *game_filepath,
@@ -212,18 +232,18 @@
 	s_game_filepath = info->path;
 
 	char config_game_filepath[MAXPATH];
-	build_game_config_filepath(config_game_filepath, sizeof(config_game_filepath), s_game_filepath, sysinfo.library_name);
+	build_game_config_filepath(config_game_filepath, sizeof(config_game_filepath), s_game_filepath, (const char*)sysinfo.library_name);
 
 	// load per game options
-	config_add_file(config_game_filepath);
+	config_append_file(s_core_config, config_game_filepath);
 
 	// setup load/save state handlers
-	*hal_api.gfn_state_load = state_stub;
-	*hal_api.gfn_state_save = state_stub;
+	*hal_api.gfn_state_load = state_load;
+	*hal_api.gfn_state_save = state_save;
 
 	*hal_api.gfn_frameskip = NULL;
 
 	// install custom input handler to filter out all requests for non-joypad devices
-	core_exports.retro_set_input_state(wrap_input_state_cb);
+	retro_set_input_state(wrap_input_state_cb);
 
 	// intercept audio output to mix stereo into mono
-	core_exports.retro_set_audio_sample(mono_mix_audio_sample_cb);
-	core_exports.retro_set_audio_sample_batch(mono_mix_audio_batch_cb);
+	retro_set_audio_sample(mono_mix_audio_sample_cb);
+	retro_set_audio_sample_batch(mono_mix_audio_batch_cb);
 
 	// if core wants to load the content by itself directly from files, then let it
 	if (sysinfo.need_fullpath)
@@ -268,14 +288,14 @@
 		config_get_bool(s_core_config, "sf2000_per_state_srm", &g_per_state_srm);
 
 		fps_counter_enable(g_show_fps);
 
 		// make sure the first two controllers are configured as gamepads
-		core_exports.retro_set_controller_port_device(0, RETRO_DEVICE_JOYPAD);
-		core_exports.retro_set_controller_port_device(1, RETRO_DEVICE_JOYPAD);
+		retro_set_controller_port_device(0, RETRO_DEVICE_JOYPAD);
+		retro_set_controller_port_device(1, RETRO_DEVICE_JOYPAD);
 
 		load_srm(0);
 	}
 
 	return ret;
 }
 
 void wrap_retro_set_environment(retro_environment_t cb)
 {
-	core_exports.retro_set_environment(wrap_environ_cb);
+	retro_set_environment(wrap_environ_cb);
 }
 
 bool wrap_environ_cb(unsigned cmd, void *data)
@@ -482,7 +502,7 @@
 
 void build_game_config_filepath(char *filepath, size_t size, const char *game_filepath, char library_name)
 {
 	char basename[MAXPATH];
 	fill_pathname_base(basename, game_filepath, sizeof(basename));
 	path_remove_extension(basename);
 
-	snprintf(filepath, size, CONFIG_DIRECTORY "/%s/%s.opt",library_name, basename);
+	snprintf(filepath, size, CONFIG_DIRECTORY "/%s/%s.opt", (char*)library_name, basename);
 }
 
 void build_core_config_filepath(char *filepath, size_t size)
 {
-	core_exports.retro_get_system_info(&sysinfo);
+	retro_get_system_info(&sysinfo);
 
 	snprintf(filepath, size, CONFIG_DIRECTORY "/%s.opt", sysinfo.library_name);
 }
@@ -498,7 +518,7 @@
 	s_core_config = config_file_new_alloc();
 
 	// load global multicore options
-	config_add_file(CONFIG_DIRECTORY "/multicore.opt");
+	config_append_file(s_core_config, CONFIG_DIRECTORY "/multicore.opt");
 
 	char config_filepath[MAXPATH];
 	build_core_config_filepath(config_filepath, sizeof(config_filepath));
@@ -582,7 +602,7 @@
 	xlog("support for XRGB8888 enabled\n");
 
 	struct retro_system_av_info av_info;
-	core_exports.retro_get_system_av_info(&av_info);
+	retro_get_system_av_info(&av_info);
 
 	s_rgb565_convert_buffer = (uint16_t*)malloc(av_info.geometry.max_width * av_info.geometry.max_height * sizeof(uint16_t));
 
@@ -620,13 +640,13 @@
 	if (enable)
 	{
 		*fw_fps_counter_enable = 1;
-		retro_set_video_refresh(wrap_video_refresh_cb);
+		retro_set_video_refresh(wrap_video_refresh_cb);
 	}
 	else
 	{
 		*fw_fps_counter_enable = 0;
 		if (g_xrgb888)
-			retro_set_video_refresh(xrgb8888_video_refresh_cb);
+			retro_set_video_refresh(xrgb8888_video_refresh_cb);
 		else
-			retro_set_video_refresh(retro_video_refresh_cb);
+			retro_set_video_refresh(hal_api.retro_video_refresh_cb);
 	}
 }
 
